<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用多台电脑发布hexo]]></title>
    <url>%2F2019%2F02%2F18%2F%E4%BD%BF%E7%94%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E5%8F%91%E5%B8%83hexo%2F</url>
    <content type="text"><![CDATA[配置Next主题 1. 建立并发布博客在github上建立并发布hexo博客 参考： 使用hexo建立博客 注意部署配置里加上分支配置branch: master 1234deploy: type: git repo: https://github.com/OneYuanYuanYuan/OneYuanYuanYuan.github.io.git branch: master 2. 建立分支在github上的xxx.github.io仓库中，新建分支(已发布的静态博客默认是master分支)。 在仓库的Code页面，branch的下拉条中输入hexo，并确定创建。 设置分支为默认分支 在仓库的Settings页面，在左侧选择Branches页。点击分支下拉列表，选中hexo，并点击update按键。 此时回到code页面，切换分支，会发现2个分支的内容是一样的。 3. 上传文件到分支 clone hexo分支 1git clone https://github.com/xxx/xxx.github.io.git &lt;folder name&gt; 其中folder name是指定的文件夹名。 替换文件 clone后，当前文件夹里的文件如下图： 删除除了.git以外的所有文件。同时替换为之前生成博客的文件夹里的文件。 修改.gitignore 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ themes/文件夹下，各主题里如果有.git文件夹，都必须删除，否则主题文件不会上传到git，导致在另一台电脑上clone文件时，没有主题文件，无法生成静态博客页面。 db.json：hexo g时会自动生成 node_modules: npm install时会自动生成 public: hexo g时会自动生成 .deploy_git: 在使用hexo d时也会重新生成 提交 使用git提交文件 123git add .git commit -m "first version"git push 此时可以在github仓库里看到下列文件 master branch hexo branch 到此，博客的源文件已全部上传到github上。 4. 在另一台电脑编写发布博客1. 安装环境安装git安装Node.js 2. 安装hexo1npm install -g hexo-cli 3. 安装自动发布的插件1npm install hexo-deployer-git --save 4. 从github上下载源文件1git clone https://github.com/xxx/xxx.github.io.git &lt;folder name&gt; 其中folder name是指定的文件夹名。 5. hexo 编写和发布进入下载的源文件文件夹。 注意不要使用hexo init命令。因为当前目录已经从github仓库中下载了hexo环境，使用hexo init会覆盖之前的文件，重建一个新的。 这里只需要安装各种插件再发布即可 1npm install 因为package.json里面已经保存了hexo的各种插件资源信息，直接安装即可，同时会生成node_modules文件夹。 之后，就可以新建文章，发布。 123hexo new &lt;title&gt;hexo ghexo s 发布 1hexo d 6. 上传新文件123git add .git commit -m "info"git push 7. hexo仓库更新下次进行Hexo仓库拉取时执行： 1git pull]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用hexo写博客]]></title>
    <url>%2F2019%2F02%2F18%2F%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[使用hexo写博客 1. 设置文字居中设置方法：1&lt;center&gt;这一行需要居中&lt;/center&gt; 2. 添加标签和分类12345678---title: Hexo的Next主题配置date: 2019-02-15 17:15:49tags: &quot;hexo&quot;categories: &quot;hexo&quot;top: truedescription: --- 3. 置顶文章安装支持插件1npm install hexo-helper-post-top --save 之后在需要置顶文章的 front-matter中，添加 top: true 即可置顶。 4.引用站内文章1&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125; 5. 文章加密访问打开 themes/*/layout/_partials/head/head.swig文件,在之后插入代码：1234567891011121314151617&lt;script&gt; (function()&#123; if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; if (prompt(&apos;请输入密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; alert(&apos;密码错误&apos;); history.back(); &#125; &#125; &#125;)();&lt;/script&gt;写文章时加上password: *：---title: 2018date: 2018-10-25 16:10:03password: 123456--- 6. 添加阅读全文按钮在文章中只要写成如下格式即可：其中摘要部分是除了文件头的title,date,tags之外的内容，如果没有，则无法实现此功能。 12345这是摘要&lt;!-- more --&gt;这是全文 需要注意的是，点击 阅读全文 之后，文章会自动定位到 所在位置，想要修改成从头阅读需要修改 主题配置文件 _config.yml 文件：12# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.scroll_to_more: false 7. 文本居中的引用此标签将生成一个带上下分割线的引用，同时引用内文本将自动居中。 文本居中时，多行文本若长度不等，视觉上会显得不对称，因此建议在引用单行文本的场景下使用。 例如作为文章开篇引用 或者 结束语之前的总结引用。 使用方式HTML方式：使用这种方式时，给 img 添加属性 class=”blockquote-center” 即可。标签方式：使用 centerquote 或者 简写 cq。此标签要求 NexT 的版本在 0.4.5 或以上。 若你正在使用的版本比较低，可以选择使用 HTML 方式。 标签调用方法 123456789&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt;&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;&lt;!-- 标签别名 --&gt;&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125; 8. 插入图片 安装插件 1npm install hexo-asset-image --save 配置将_config.yml文件中的配置项post_asset_folder设为true后，执行命令 1hexo new post_name 在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。 123_posts/post_name/image.jpg![](image.jpg) 上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo建立博客]]></title>
    <url>%2F2019%2F02%2F18%2F%E4%BD%BF%E7%94%A8hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[使用Hexo在GitHub上搭建个人博客 12参考https://hexo.io/zh-cn/ 1. 安装安装git安装Node.js 下来只需要使用 npm 即可完成 Hexo 的安装。1npm install -g hexo-cli 2. 新建一个网站 init1hexo init [folder] 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 new1hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 generate1hexo generate 生成静态文件。 选项 描述-d, –deploy 文件生成后立即部署网站-w, –watch 监视文件变动该命令可以简写为 1hexo g publish 1hexo publish [layout] &lt;filename&gt; 发表草稿。只有当新建的文章是草稿时，才需要使用 使用1hexo new [layout] &lt;title&gt; 新建文章时，默认的default_layout参数是post，因此可以不使用此命令。如果参数是draft，或者new draft ```12345则需要先publish。参考：&#123;% post_link 使用hexo新建文章 %&#125;5. server hexo server1234启动服务器。默认情况下，访问网址为： http://localhost:4000/。如果您想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口，如下： hexo server -p 500012346. clean hexo clean12345678910111213141516清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令## 3. 发布到github### 配置1. 先修改&apos;_config.yml&apos;配置文件，下面是一个示例```ymldeploy: type: git repo: https://github.com/xxx/xxx.github.io.git 这里需要在github里的个人账户下，新建一个与账户名同名的仓库xxx.github.io。这里的xxx必须与账户名一致。 安装自动发布的插件 安装 hexo-deployer-git。 1npm install hexo-deployer-git --save 以上2条命令都可以，发布可能有延时，稍等即可。 部署您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。 1234567hexo generate --deployhexo deploy --generate# 简写# 上面两个命令可以简写为hexo g -dhexo d -g]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用hexo新建文章]]></title>
    <url>%2F2019%2F02%2F17%2F%E4%BD%BF%E7%94%A8hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[&lt; 转载说明作者：小胖丫头不改名链接：https://www.jianshu.com/p/265b2c653e6f來源：简书 1: 新建文章在hexo所在目录下，打开terminal，在命令行输入：1hexo new a a是文章标题，也可以加上双引号,如“a”。通过这行命令，我们新建出来了一个page，而且是一个post page，page还有其他种，稍后我们会提到。正确的结果：我们会在_posts里看见多了一个a.md文件。因此我们也知道了，默认情况下，hexo为我们创建的是markdown文件。刷新页面（http://localhost:4000/）我们能看见新添一个名字叫a的文章，没有任何内容。而这个_posts文件夹，算是一个比较特殊的文件夹，因为它装着所有你发布出去的文章。打开a.md文件，我们会看到1234567---title: 1date: 2017-09-15 19:00:41tags:---在这里随便写点什么 然后刷新页面,就会看到你写的内容。与此同时，hexo也会自动为这个post生成一个页面，当我们点击标题，就会进入那个页面。 2: 草稿箱上一步我们新建出来的，叫做post page。除了post page，我们还可以新建draft page，也就是草稿。很多时候我们需要先写成草稿，而暂时不发布出去。draft page就可以满足我们的要求，我们的网站上是看不到草稿文件的。在terminal输入1hexo new draft b 我们会在source下看见一个新的文件夹，_drafts，这个里面会装我们所有的草稿文件。那写好了的草稿，如何可以在不发布的情况下，预览一下文章在网站上的样子呢？1hexo server --draft 当然，你要先shut down原来开着那个server，才可以开启新的server。如此一来，我们就可以预览草稿文件啦 3: 发布草稿当你准备好了要发布草稿时:1hexo publish b 你会发现_drafts里的b.md不见了，跑到了_posts里面,也就说明你的草稿发布成功了。 4: normal page我目前还不知道该如何用中文称呼这类页面。我们可以把post和draft统称为blog pages，在这之外的一种就是normal pages， 类似一个网站上的“关于”，“了解我们”之类的页面。这类page要如何新建呢？1hexo new page c 和前两种不同，这个命令会在source文件夹内创建出c文件夹，与_posts，_drafts并列。文件夹里面有一个index.md文件。刷新页面，你会发现c并没有出现在页面内，那它在哪儿呢？在网址后面加上c/， 即http://localhost:4000/c/，就可以看到了。正因为c不是一个blog page，所以它也不会出现在blog列表中，而是要通过URL去access。 5: 一个小tip现在我们了解到page一共有三种，post，draft，normal。 那为什么一开始的时候我们用1hexo new a 就直接生成了post page呢？因为默认的设置。打开熟悉的_config.yml文件，找到1default_layout: post 这句表示默认的页面会新建成post格式的。所以，如果你习惯先把文章写成草稿，那就把它改成draft就好。1default_layout: draft 6 资源文件夹资源（Asset）代表 source 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 source/images 文件夹中。然后通过类似于 的方法访问它们。 对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。1post_asset_folder: true]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客使用到的插件]]></title>
    <url>%2F2019%2F02%2F16%2Fhexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[hexo博客使用到的插件 1. 置顶文章安装支持插件1npm install hexo-helper-post-top --save 之后在需要置顶文章的 front-matter中，添加 top: true 即可置顶。 2. 添加搜索功能1、安装 hexo-generator-searchdb 插件1npm install hexo-generator-searchdb --save 2、打开 站点配置文件 找到Extensions在下面添加123456# 搜索search: path: search.xml field: post format: html limit: 10000 3、打开 主题配置文件 找到Local search，将enable设置为true 3. 页面动画人物安装模块:博客根目录选择cmd命令窗口或者git bash 输入以下代码，安装插件 操作：1npm install --save hexo-helper-live2d 下载模型作者动画展示网站https://huaji8.top/post/live2d-plugin-2.0/ 12345678910111213141516171819202122live2d-widget-model-chitoselive2d-widget-model-epsilon2_1live2d-widget-model-gflive2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)live2d-widget-model-harutolive2d-widget-model-hibikilive2d-widget-model-hijikilive2d-widget-model-izumilive2d-widget-model-koharulive2d-widget-model-mikulive2d-widget-model-ni-jlive2d-widget-model-nicolive2d-widget-model-nietzschelive2d-widget-model-nipsilonlive2d-widget-model-nitolive2d-widget-model-shizukulive2d-widget-model-tororolive2d-widget-model-tsumikilive2d-widget-model-unitychanlive2d-widget-model-wankolive2d-widget-model-z16 选好对应的模型，使用 npm install 模型的包名来安装 比如我选择的的是live2d-widget-model-hijiki 模型包 在hexo博客根目录选择cmd命令窗口或者git bash 输入以下代码1npm install live2d-widget-model-hijiki 执行安装就完事了 配置请向Hexo的 _config.yml 文件添加配置. 操作：打开个人Hexo博客文件根目录下的 _config.yml 文件，在最后添加一下代码示例:12345678910111213141516live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-hijiki display: position: right width: 150 height: 300 mobile: show: true 插件部署与应用就完成了，接下来就是部署hexo博客和个人主页 4. 字数统计和阅读时长 安装 hexo-wordcount1npm install --save hexo-wordcount 先安装插件。 post添加打开hexo\themes\hexo-theme-next\layout\macro路径下的post.swig文件，找到这段代码后12345678&#123;% if not is_index and theme.busuanzi_count.enable and theme.busuanzi_count.post_views %&#125; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;post-meta-item-icon&quot; &#123;% if not theme.post_meta.item_text %&#125; title=&quot;&#123;&#123; __(&apos;post.views&apos;) &#125;&#125;&quot; &#123;% endif %&#125;&gt; &lt;i class=&quot;fa fa-&#123;&#123; theme.busuanzi_count.post_views_icon &#125;&#125;&quot;&gt;&lt;/i&gt; &#123;% if theme.post_meta.item_text %&#125; &#123;&#123;__(&apos;post.views&apos;) + __(&apos;symbol.colon&apos;) &#125;&#125; &#123;% endif %&#125; &lt;span class=&quot;busuanzi-value&quot; id=&quot;busuanzi_value_page_pv&quot; &gt;&lt;/span&gt; &lt;/span&gt; 12345在endif上面，即本文代码块那个空行处添加以下代码&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&lt;span title=&quot;&#123;&#123;__(&apos;post.wordcount&apos;) &#125;&#125;&quot;&gt;&lt;span class=&quot;post-meta-item-icon&quot;&gt;&lt;i class=&quot;fa fa-file-word-o&quot;&gt;&lt;/i&gt;&lt;/span&gt;字数： &#123;&#123; wordcount(post.content) &#125;&#125;&lt;/span&gt; 5. 插入图片 安装插件 1npm install hexo-asset-image --save 配置将_config.yml文件中的配置项post_asset_folder设为true后，执行命令 1hexo new post_name 在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。 123_posts/post_name/image.jpg![](image.jpg) 上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo的Next主题配置]]></title>
    <url>%2F2019%2F02%2F15%2FHexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[配置Next主题 123参考https://hexo.io/zh-cn/http://theme-next.iissnan.com/ 下载主题 下载next主题进入博客下的./themes文件夹，使用git clone下载主题, 加上–depth=1只下载最近的版本，不下载历史提交记录。这样可以减少文件大小。 1git clone https://github.com/theme-next/hexo-theme-next.git hexo-theme-next --depth=1 修改主题进入hexo-theme-next文件夹下，打开_config.yml文件, 选择主题。Next有4个主题。 123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Muse#scheme: Mistscheme: Pisces#scheme: Gemini 启动本地预览服务 1hexo s 在网页中输入localhost:4000查看当前主题。如果需要放到xxx.github.io上，则使用如下命令：1hexo generate --deploy 优化1. 头像设置待更新2. 网站logo设置待更新3. 侧栏设置待更新4. 修改语言在根目录的_config.yml中，文件开头的语言选择为中文(可选语言，可查看主题下的language目录)12345678# Sitetitle: subtitle:description:keywords:author: language: zh-CN timezone: ==5. 设置RSS==1、先安装 hexo-generator-feed 插件1npm install hexo-generator-feed --save 2、打开 站点配置文件 找到Extensions在下面添加123456789# RSS订阅feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: &apos; &apos; 3、打开 主题配置文件 找到rss，设置为1rss: /atom.xml 6. 添加分类模块 添加关于页面1hexo new page &quot;about&quot; 在source文件夹下就会有about文件夹，编辑index.md，然后进入主题的_config.yml中，menu下的#about注释去掉 添加目录云、标签云页面12hexo new page &quot;tags&quot;hexo new page &quot;categories&quot; 然后设置同上，去掉主题配置文件中的注释，调整菜单顺序 7. 添加搜索功能1、安装 hexo-generator-searchdb 插件1npm install hexo-generator-searchdb --save 2、打开 站点配置文件 找到Extensions在下面添加123456# 搜索search: path: search.xml field: post format: html limit: 10000 3、打开 主题配置文件 找到Local search，将enable设置为true 8. 添加阅读全文按钮在文章中只要写成如下格式即可：其中摘要部分是除了文件头的title,date,tags之外的内容，如果没有，则无法实现此功能。 12345这是摘要&lt;!-- more --&gt;这是全文 需要注意的是，点击 阅读全文 之后，文章会自动定位到 所在位置，想要修改成从头阅读需要修改 主题配置文件 _config.yml 文件：12# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.scroll_to_more: false 9. 设置网站缩略图标把你的图片（png或jpg格式，不是favicon.ico）放在themes/next/source/images里，然后打开 主题配置文件 找到favicon，将small、medium、apple_touch_icon三个字段的值都设置成/images/图片名.jpg就可以了，其他字段都注释掉。 1234567891011favicon: #small: /images/favicon-16x16-next.png #medium: /images/favicon-32x32-next.png #apple_touch_icon: /images/apple-touch-icon-next.png #safari_pinned_tab: /images/logo.svg small: /images/favicon-my.png medium: /images/favicon-my.png apple_touch_icon: /images/favicon-my.png safari_pinned_tab: /images/favicon-my.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 10. 设置文章字体的颜色、大小如果想设置某一句的颜色或大小，只需用html语法写出来就行了123&lt;font color=&quot;#FF0000&quot;&gt; 我可以设置这一句的颜色哈哈 &lt;/font&gt; &lt;font size=6&gt; 我还可以设置这一句的大小嘻嘻 &lt;/font&gt; &lt;font size=5 color=&quot;#FF0000&quot;&gt; 我甚至可以设置这一句的颜色和大小呵呵&lt;/font&gt; 11. 设置文字居中设置方法：1&lt;center&gt;这一行需要居中&lt;/center&gt; 12. 添加评论系统开启Valine注册Leancloud我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号 Leancloud官网，点我注册 注册完以后需要创建一个应用，名字可以随便起，然后 进入应用-&gt;设置-&gt;应用key 获取你的appid 和 appkey 拿到你的appid和appkey之后，打开主题配置文件 搜索 valine，填入appid 和 appkey 123456789valine: enable: true appid: your app id appkey: your app key notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: ヾﾉ≧∀≦)o来啊，快活啊! guest_info: nick,mail,link pageSize: 10 最后！记得在Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去 ==如需取消某个 页面/文章 的评论，在 md 文件的 front-matter 中增加 comments: false== 13. 添加文章访问计数不蒜子统计http://theme-next.iissnan.com/third-party-services.html#analytics-busuanzi 编辑 主题配置文件 中的busuanzi_count的配置项。 当enable: true时，代表开启全局开关。若site_uv、site_pv、page_pv的值均为false时，不蒜子仅作记录而不会在页面上显示。12345678910# Show Views/Visitors of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzibusuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 14. 添加站点访问计数https://blog.csdn.net/qw8880000/article/details/80235391 修改next主题的模板文件1234567把访问量统计放在网页的footer，打开 themes/next/layout/_partial/footer.swig，将下面这段代码添加到里面, 可调整添加位置 &lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;总访客&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人&lt;/span&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; 15. 分享服务 ==异常，功能未实现==http://theme-next.iissnan.com/third-party-services.html#share-system JiaThis编辑 主题配置文件， 添加/修改字段 jiathis，值为 true。12# JiaThis 分享服务jiathis: true 16. 给next主题添加打赏http://theme-next.iissnan.com/theme-settings.html#reward 将微信和支付宝的收款码图片放在\themes\next\source\images目录下，修改主题配置文件。找到reward, 修改如下：123456reward: enable: true comment: 谢谢阅读！ wechatpay: /images/wechat-reward-image.jpg alipay: /images/alipay-reward-image.jpg #bitcoin: /images/bitcoin.jpg 16. 站点建立时间这个时间将在站点的底部显示，例如 © 2013 - 2015。 编辑 主题配置文件，新增字段 since。12配置示例since: 2013 17. 去掉文章目录标题的自动编号但是默认的主题会给文章标题带上编号，去掉方法如下：打开主题配置文件，找到将number改为false即可 18. 文章加密访问打开 themes/*/layout/_partials/head/head.swig文件,在之后插入代码：1234567891011121314151617&lt;script&gt; (function()&#123; if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; if (prompt(&apos;请输入密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; alert(&apos;密码错误&apos;); history.back(); &#125; &#125; &#125;)();&lt;/script&gt;写文章时加上password: *：---title: 2018date: 2018-10-25 16:10:03password: 123456--- 19. Hexo Next背景动画 打开Git进入自己文件夹下/themes/next文件夹下 1cd themes/next 运行git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest即: 1git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest 进入 thems/next/_config.yml文件下修改 canvas_nest: true(注意: 冒号后面要空格) 20. 鼠标点击效果实现点击出现桃心效果在/themes/*/source/js/src下新建文件click.js，接着把以下粘贴到click.js文件中。代码如下：1!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 在\themes*\layout_layout.swig文件末尾添加：12&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt; 点击爆炸效果首先在themes*\source\js 里面建一个叫fireworks.js的文件，代码如下：1&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;; 在\themes*\layout\includes footer.swig文件中添加如下代码，自己想放那也可以放那里。12345&#123;% if theme.fireworks %&#125; &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/fireworks.js&quot;&gt;&lt;/script&gt; &#123;% endif %&#125; 打开主题配置文件_config.yml，在里面最后写下：12# Fireworks 点击爆炸效果fireworks: true 21. 页面动画人物安装模块:博客根目录选择cmd命令窗口或者git bash 输入以下代码，安装插件 操作：1npm install --save hexo-helper-live2d 下载模型作者动画展示网站https://huaji8.top/post/live2d-plugin-2.0/ 12345678910111213141516171819202122live2d-widget-model-chitoselive2d-widget-model-epsilon2_1live2d-widget-model-gflive2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)live2d-widget-model-harutolive2d-widget-model-hibikilive2d-widget-model-hijikilive2d-widget-model-izumilive2d-widget-model-koharulive2d-widget-model-mikulive2d-widget-model-ni-jlive2d-widget-model-nicolive2d-widget-model-nietzschelive2d-widget-model-nipsilonlive2d-widget-model-nitolive2d-widget-model-shizukulive2d-widget-model-tororolive2d-widget-model-tsumikilive2d-widget-model-unitychanlive2d-widget-model-wankolive2d-widget-model-z16 选好对应的模型，使用 npm install 模型的包名来安装 比如我选择的的是live2d-widget-model-hijiki 模型包 在hexo博客根目录选择cmd命令窗口或者git bash 输入以下代码1npm install live2d-widget-model-hijiki 执行安装就完事了 配置请向Hexo的 _config.yml 文件添加配置. 操作：打开个人Hexo博客文件根目录下的 _config.yml 文件，在最后添加一下代码示例:12345678910111213141516live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-hijiki display: position: right width: 150 height: 300 mobile: show: true 插件部署与应用就完成了，接下来就是部署hexo博客和个人主页 22. 字数统计和阅读时长 安装 hexo-wordcount1npm install --save hexo-wordcount 先安装插件。 post添加打开hexo\themes\hexo-theme-next\layout\macro路径下的post.swig文件，找到这段代码后12345678&#123;% if not is_index and theme.busuanzi_count.enable and theme.busuanzi_count.post_views %&#125; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;post-meta-item-icon&quot; &#123;% if not theme.post_meta.item_text %&#125; title=&quot;&#123;&#123; __(&apos;post.views&apos;) &#125;&#125;&quot; &#123;% endif %&#125;&gt; &lt;i class=&quot;fa fa-&#123;&#123; theme.busuanzi_count.post_views_icon &#125;&#125;&quot;&gt;&lt;/i&gt; &#123;% if theme.post_meta.item_text %&#125; &#123;&#123;__(&apos;post.views&apos;) + __(&apos;symbol.colon&apos;) &#125;&#125; &#123;% endif %&#125; &lt;span class=&quot;busuanzi-value&quot; id=&quot;busuanzi_value_page_pv&quot; &gt;&lt;/span&gt; &lt;/span&gt; 12345在endif上面，即本文代码块那个空行处添加以下代码&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&lt;span title=&quot;&#123;&#123;__(&apos;post.wordcount&apos;) &#125;&#125;&quot;&gt;&lt;span class=&quot;post-meta-item-icon&quot;&gt;&lt;i class=&quot;fa fa-file-word-o&quot;&gt;&lt;/i&gt;&lt;/span&gt;字数： &#123;&#123; wordcount(post.content) &#125;&#125;&lt;/span&gt; 23. 显示当前浏览进度修改themes/*/_config.yml，把 false 改为 true：12345# Back to top in sidebarb2t: true# Scroll percent label in b2t buttonscrollpercent: true 24. 置顶文章安装支持插件1npm install hexo-helper-post-top --save 之后在需要置顶文章的 front-matter中，添加 top: true 即可置顶。 25. 代码区copy功能1[参考](https://www.jianshu.com/p/3e9d614c1e77) 26.引用站内文章1&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125; 27. 文本居中的引用此标签将生成一个带上下分割线的引用，同时引用内文本将自动居中。 文本居中时，多行文本若长度不等，视觉上会显得不对称，因此建议在引用单行文本的场景下使用。 例如作为文章开篇引用 或者 结束语之前的总结引用。 使用方式HTML方式：使用这种方式时，给 img 添加属性 class=”blockquote-center” 即可。标签方式：使用 centerquote 或者 简写 cq。此标签要求 NexT 的版本在 0.4.5 或以上。 若你正在使用的版本比较低，可以选择使用 HTML 方式。 标签调用方法 123456789&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt;&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;&lt;!-- 标签别名 --&gt;&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125; 28. 插入图片 安装插件 1npm install hexo-asset-image --save 配置将_config.yml文件中的配置项post_asset_folder设为true后，执行命令 1hexo new post_name 在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。 123_posts/post_name/image.jpg![](image.jpg) 上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。 ##### 添加文章末尾版权声明找到post.swig文件，在footer.post-footer中添加如下代码。 copy时去掉和12345678910111213&lt;footer class=&quot;post-footer&quot;&gt; &#123;% if not is_index %&#125; &lt;div class=&quot;copyright&quot; style=&quot;clear:both;&quot;&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; post.date.format(&quot;YYYY年M月D日 - HH时MM分&quot;) &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;本文字数:&lt;/span&gt;&lt;span class=&quot;page-count&quot;&gt;本文一共有&#123;&#123; wordcount(page.content) &#125;&#125;字&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot;&gt;&#123;&#123; post.permalink &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc/4.0/&quot; title=&quot;Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)&quot;&gt;Attribution-NonCommercial 4.0&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;转载请保留以上信息。&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &#123;% endif %&#125;&lt;/footer&gt; 然后需要修改一下样式，找到posts.styl,加入如下样式1234567.post-footer .copyright&#123; padding-top: 1.5em; padding-left: 1em; font-size: 12px; line-height: 1em; border:1px solid #ccc;&#125; ==注意==1. 如果发现本机已经调试过的页面，发布后，在xxx.github.io上没有变化，可尝试删除.deploy_git文件夹, 使用hexo d重新部署如果只是本机的配置修改后，没有更新，则重新生成hexo123hexo cleanhexo ghexo s n. ==修改文章内链接文本样式==打开文件 themes/next/source/css/_common/components/post/post.styl，在末尾添加12345678910.post-body p a &#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 其中选择 .post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2F2019%2F02%2F15%2Ftest%2F</url>
    <content type="text"><![CDATA[git基础基本语法123git pullgit commitgit push test cmd0test powershell &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD new computer teset =======new computer test update test new computer update test]]></content>
      <categories>
        <category>123</category>
      </categories>
      <tags>
        <tag>1231324</tag>
      </tags>
  </entry>
</search>
